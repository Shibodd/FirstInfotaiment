/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/missionselect_screen/MissionSelectViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

MissionSelectViewBase::MissionSelectViewBase() :
    updateItemCallback(this, &MissionSelectViewBase::updateItemCallbackHandler),
    buttonCallback(this, &MissionSelectViewBase::buttonCallbackHandler)
{
    __background.setPosition(0, 0, 800, 480);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    btnPrevPage.setXY(749, 432);
    btnPrevPage.setBitmaps(touchgfx::Bitmap(BITMAP_BTN_PREV_RAW_REMOVEBG_PREVIEW_ID), touchgfx::Bitmap(BITMAP_BTN_PREV_RAW_REMOVEBG_PREVIEW_ID));
    btnPrevPage.setAction(buttonCallback);
    add(btnPrevPage);

    labelSelectMission.setXY(258, 17);
    labelSelectMission.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    labelSelectMission.setLinespacing(0);
    labelSelectMission.setTypedText(touchgfx::TypedText(T___SINGLEUSE_U2AM));
    add(labelSelectMission);

    missionScrollList.setPosition(280, 76, 214, 377);
    missionScrollList.setHorizontal(false);
    missionScrollList.setCircular(false);
    missionScrollList.setEasingEquation(touchgfx::EasingEquations::backEaseOut);
    missionScrollList.setSwipeAcceleration(10);
    missionScrollList.setDragAcceleration(10);
    missionScrollList.setNumberOfItems(1);
    missionScrollList.setPadding(0, 0);
    missionScrollList.setSnapping(false);
    missionScrollList.setDrawableSize(36, 7);
    missionScrollList.setDrawables(missionScrollListListItems, updateItemCallback);
    add(missionScrollList);
}

MissionSelectViewBase::~MissionSelectViewBase()
{

}

void MissionSelectViewBase::setupScreen()
{
    missionScrollList.initialize();
    for (int i = 0; i < missionScrollListListItems.getNumberOfDrawables(); i++)
    {
        missionScrollListListItems[i].initialize();
    }
}

void MissionSelectViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &btnPrevPage)
    {
        //fromMissionSelectToLiveData
        //When btnPrevPage clicked change screen to MainInfotaiment
        //Go to MainInfotaiment with screen transition towards West
        application().gotoMainInfotaimentScreenSlideTransitionWest();
        //startManualMission
        //When btnPrevPage clicked call virtual function
        //Call startManualMission
        startManualMission();
        //startTrackdriveMission
        //When btnPrevPage clicked call virtual function
        //Call startTrackdriveMission
        startTrackdriveMission();
        //startAccelerationMission
        //When btnPrevPage clicked call virtual function
        //Call startAccelerationMission
        startAccelerationMission();
    }
}

void MissionSelectViewBase::updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex)
{
    if (items == &missionScrollListListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        missionBtnContainer* cc = (missionBtnContainer*)d;
        missionScrollListUpdateItem(*cc, itemIndex);
    }
}
